// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peers.proto

package snet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Peer struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address              string               `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Feeds                []string             `protobuf:"bytes,4,rep,name=feeds,proto3" json:"feeds,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UseTLS               bool                 `protobuf:"varint,7,opt,name=useTLS,proto3" json:"useTLS,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_peers_98ced1a84bd09a4b, []int{0}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (dst *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(dst, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetFeeds() []string {
	if m != nil {
		return m.Feeds
	}
	return nil
}

func (m *Peer) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Peer) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Peer) GetUseTLS() bool {
	if m != nil {
		return m.UseTLS
	}
	return false
}

type CreatePeerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Feeds                []string `protobuf:"bytes,4,rep,name=feeds,proto3" json:"feeds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePeerRequest) Reset()         { *m = CreatePeerRequest{} }
func (m *CreatePeerRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePeerRequest) ProtoMessage()    {}
func (*CreatePeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_peers_98ced1a84bd09a4b, []int{1}
}
func (m *CreatePeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePeerRequest.Unmarshal(m, b)
}
func (m *CreatePeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePeerRequest.Marshal(b, m, deterministic)
}
func (dst *CreatePeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePeerRequest.Merge(dst, src)
}
func (m *CreatePeerRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePeerRequest.Size(m)
}
func (m *CreatePeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePeerRequest proto.InternalMessageInfo

func (m *CreatePeerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreatePeerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePeerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreatePeerRequest) GetFeeds() []string {
	if m != nil {
		return m.Feeds
	}
	return nil
}

type UpdatePeerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Feeds                []string `protobuf:"bytes,4,rep,name=feeds,proto3" json:"feeds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePeerRequest) Reset()         { *m = UpdatePeerRequest{} }
func (m *UpdatePeerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePeerRequest) ProtoMessage()    {}
func (*UpdatePeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_peers_98ced1a84bd09a4b, []int{2}
}
func (m *UpdatePeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePeerRequest.Unmarshal(m, b)
}
func (m *UpdatePeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePeerRequest.Marshal(b, m, deterministic)
}
func (dst *UpdatePeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePeerRequest.Merge(dst, src)
}
func (m *UpdatePeerRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePeerRequest.Size(m)
}
func (m *UpdatePeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePeerRequest proto.InternalMessageInfo

func (m *UpdatePeerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdatePeerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePeerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdatePeerRequest) GetFeeds() []string {
	if m != nil {
		return m.Feeds
	}
	return nil
}

type GetPeerRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPeerRequest) Reset()         { *m = GetPeerRequest{} }
func (m *GetPeerRequest) String() string { return proto.CompactTextString(m) }
func (*GetPeerRequest) ProtoMessage()    {}
func (*GetPeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_peers_98ced1a84bd09a4b, []int{3}
}
func (m *GetPeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPeerRequest.Unmarshal(m, b)
}
func (m *GetPeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPeerRequest.Marshal(b, m, deterministic)
}
func (dst *GetPeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPeerRequest.Merge(dst, src)
}
func (m *GetPeerRequest) XXX_Size() int {
	return xxx_messageInfo_GetPeerRequest.Size(m)
}
func (m *GetPeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPeerRequest proto.InternalMessageInfo

func (m *GetPeerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetPeerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListPeerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPeerRequest) Reset()         { *m = ListPeerRequest{} }
func (m *ListPeerRequest) String() string { return proto.CompactTextString(m) }
func (*ListPeerRequest) ProtoMessage()    {}
func (*ListPeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_peers_98ced1a84bd09a4b, []int{4}
}
func (m *ListPeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPeerRequest.Unmarshal(m, b)
}
func (m *ListPeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPeerRequest.Marshal(b, m, deterministic)
}
func (dst *ListPeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPeerRequest.Merge(dst, src)
}
func (m *ListPeerRequest) XXX_Size() int {
	return xxx_messageInfo_ListPeerRequest.Size(m)
}
func (m *ListPeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPeerRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Peer)(nil), "Peer")
	proto.RegisterType((*CreatePeerRequest)(nil), "CreatePeerRequest")
	proto.RegisterType((*UpdatePeerRequest)(nil), "UpdatePeerRequest")
	proto.RegisterType((*GetPeerRequest)(nil), "GetPeerRequest")
	proto.RegisterType((*ListPeerRequest)(nil), "ListPeerRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeersClient is the client API for Peers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeersClient interface {
	Create(ctx context.Context, in *CreatePeerRequest, opts ...grpc.CallOption) (*Peer, error)
	Get(ctx context.Context, in *GetPeerRequest, opts ...grpc.CallOption) (*Peer, error)
	Update(ctx context.Context, in *UpdatePeerRequest, opts ...grpc.CallOption) (*Peer, error)
	Delete(ctx context.Context, in *GetPeerRequest, opts ...grpc.CallOption) (*Peer, error)
	List(ctx context.Context, in *ListPeerRequest, opts ...grpc.CallOption) (Peers_ListClient, error)
}

type peersClient struct {
	cc *grpc.ClientConn
}

func NewPeersClient(cc *grpc.ClientConn) PeersClient {
	return &peersClient{cc}
}

func (c *peersClient) Create(ctx context.Context, in *CreatePeerRequest, opts ...grpc.CallOption) (*Peer, error) {
	out := new(Peer)
	err := c.cc.Invoke(ctx, "/Peers/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peersClient) Get(ctx context.Context, in *GetPeerRequest, opts ...grpc.CallOption) (*Peer, error) {
	out := new(Peer)
	err := c.cc.Invoke(ctx, "/Peers/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peersClient) Update(ctx context.Context, in *UpdatePeerRequest, opts ...grpc.CallOption) (*Peer, error) {
	out := new(Peer)
	err := c.cc.Invoke(ctx, "/Peers/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peersClient) Delete(ctx context.Context, in *GetPeerRequest, opts ...grpc.CallOption) (*Peer, error) {
	out := new(Peer)
	err := c.cc.Invoke(ctx, "/Peers/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peersClient) List(ctx context.Context, in *ListPeerRequest, opts ...grpc.CallOption) (Peers_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Peers_serviceDesc.Streams[0], "/Peers/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &peersListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Peers_ListClient interface {
	Recv() (*Peer, error)
	grpc.ClientStream
}

type peersListClient struct {
	grpc.ClientStream
}

func (x *peersListClient) Recv() (*Peer, error) {
	m := new(Peer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeersServer is the server API for Peers service.
type PeersServer interface {
	Create(context.Context, *CreatePeerRequest) (*Peer, error)
	Get(context.Context, *GetPeerRequest) (*Peer, error)
	Update(context.Context, *UpdatePeerRequest) (*Peer, error)
	Delete(context.Context, *GetPeerRequest) (*Peer, error)
	List(*ListPeerRequest, Peers_ListServer) error
}

func RegisterPeersServer(s *grpc.Server, srv PeersServer) {
	s.RegisterService(&_Peers_serviceDesc, srv)
}

func _Peers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Peers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServer).Create(ctx, req.(*CreatePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Peers/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServer).Get(ctx, req.(*GetPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Peers/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServer).Update(ctx, req.(*UpdatePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Peers/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServer).Delete(ctx, req.(*GetPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peers_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPeerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeersServer).List(m, &peersListServer{stream})
}

type Peers_ListServer interface {
	Send(*Peer) error
	grpc.ServerStream
}

type peersListServer struct {
	grpc.ServerStream
}

func (x *peersListServer) Send(m *Peer) error {
	return x.ServerStream.SendMsg(m)
}

var _Peers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Peers",
	HandlerType: (*PeersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Peers_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Peers_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Peers_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Peers_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Peers_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peers.proto",
}

func init() { proto.RegisterFile("peers.proto", fileDescriptor_peers_98ced1a84bd09a4b) }

var fileDescriptor_peers_98ced1a84bd09a4b = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0xcd, 0x42, 0xbb, 0xc8, 0x90, 0x80, 0x4c, 0x8c, 0xd9, 0x90, 0x18, 0x2b, 0x5c, 0x7a, 0x5a,
	0x0c, 0x7a, 0xf1, 0x88, 0x9a, 0x70, 0xe1, 0x60, 0x2a, 0x5e, 0xbc, 0x98, 0xe2, 0x0e, 0xa4, 0x09,
	0xd0, 0xda, 0xdd, 0x7e, 0x9a, 0xff, 0xe4, 0x67, 0x98, 0x6e, 0xbb, 0x89, 0x4a, 0x8c, 0xf1, 0xc0,
	0x6d, 0xdf, 0xec, 0x7b, 0xf3, 0xde, 0x4c, 0x06, 0x3a, 0x19, 0x51, 0xae, 0x65, 0x96, 0xa7, 0x26,
	0x1d, 0x9c, 0xaf, 0xd3, 0x74, 0xbd, 0xa1, 0xb1, 0x45, 0xcb, 0x62, 0x35, 0x36, 0xc9, 0x96, 0xb4,
	0x89, 0xb7, 0x59, 0x45, 0x18, 0x7e, 0x30, 0xf0, 0x1e, 0x88, 0x72, 0xec, 0x42, 0x23, 0x51, 0x82,
	0x05, 0x2c, 0x6c, 0x47, 0x8d, 0x44, 0x21, 0x82, 0xb7, 0x8b, 0xb7, 0x24, 0x1a, 0xb6, 0x62, 0xdf,
	0x28, 0xa0, 0x15, 0x2b, 0x95, 0x93, 0xd6, 0xa2, 0x69, 0xcb, 0x0e, 0xe2, 0x09, 0xf8, 0x2b, 0x22,
	0xa5, 0x85, 0x17, 0x34, 0xc3, 0x76, 0x54, 0x01, 0xbc, 0x01, 0x78, 0xcd, 0x29, 0x36, 0xa4, 0x5e,
	0x62, 0x23, 0xfc, 0x80, 0x85, 0x9d, 0xc9, 0x40, 0x56, 0x91, 0xa4, 0x8b, 0x24, 0x17, 0x2e, 0x52,
	0xd4, 0xae, 0xd9, 0x53, 0x53, 0x4a, 0x8b, 0x4c, 0x39, 0x29, 0xff, 0x5b, 0x5a, 0xb3, 0xa7, 0x06,
	0x4f, 0x81, 0x17, 0x9a, 0x16, 0xf3, 0x47, 0xd1, 0x0a, 0x58, 0x78, 0x14, 0xd5, 0x68, 0xb8, 0x86,
	0xfe, 0x9d, 0xed, 0x5f, 0xce, 0x1b, 0xd1, 0x5b, 0x41, 0xda, 0x1c, 0x62, 0xec, 0xd2, 0xe8, 0xc9,
	0xa6, 0x39, 0xb4, 0xd1, 0x35, 0x74, 0x67, 0x64, 0xfe, 0xe9, 0x32, 0xec, 0x43, 0x6f, 0x9e, 0xe8,
	0xaf, 0xb2, 0xc9, 0x3b, 0x03, 0xbf, 0xc4, 0x1a, 0x47, 0xc0, 0xab, 0x25, 0x21, 0xca, 0xbd, 0x6d,
	0x0d, 0x7c, 0x69, 0x6f, 0xe5, 0x0c, 0x9a, 0x33, 0x32, 0xd8, 0x93, 0xdf, 0xdd, 0xdd, 0xf7, 0x08,
	0x78, 0x35, 0x3f, 0xa2, 0xdc, 0x5b, 0x84, 0x23, 0x05, 0xc0, 0xef, 0x69, 0x43, 0x86, 0x7e, 0x6d,
	0x73, 0x01, 0x5e, 0x99, 0x13, 0x8f, 0xe5, 0x8f, 0xb8, 0x35, 0xe1, 0x92, 0xdd, 0xf2, 0x67, 0x4f,
	0xef, 0xc8, 0x2c, 0xb9, 0xbd, 0x88, 0xab, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x29, 0xa7,
	0xf3, 0xfc, 0x02, 0x00, 0x00,
}
